{"version":3,"sources":["Netflix-Logo.png","components/Header.js","components/Template.js","Redux/actions.js","components/Titles.js","App.js","serviceWorker.js","Redux/reducers.js","Redux/store.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Template","this","props","fetchData","console","log","data","mylist","recommendations","listName","btnType","remove","add","btnName","map","item","index","key","img","title","onClick","React","Component","connect","state","dispatch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","responseBody","wrap","_context","prev","next","fetch","sent","json","type","t0","error","stop","_x","apply","arguments","movie","removeMovie","addMovie","Titles","App","components_Header","components_Template","components_Titles","Boolean","window","location","hostname","match","defaultState","reducers","length","undefined","action","mylistMovie","filter","id","objectSpread","concat","toConsumableArray","recommendationsMovie","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2efdf07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Netflix-Logo.002d2250.png\";","import React from \"react\"\r\nimport logo from '../Netflix-Logo.png';\r\nimport '../App.css';\r\n\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className = \"background\">\r\n          <img className = \"logo\" src = {logo} alt = \"netflix icon\" />\r\n        </div> \r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\nimport {getData } from '../Redux/actions';\r\nimport {removeMovie} from '../Redux/actions';\r\nimport {addMovie} from '../Redux/actions';\r\nimport {connect} from 'react-redux';\r\nimport '../App.css';\r\n\r\nclass Template extends React.Component{\r\n  componentDidMount() {\r\n    this.props.fetchData();\r\n  }\r\n  render(){\r\n    console.log(this.props.data)\r\n    const mylist = this.props.data.mylist;\r\n    const recommendations = this.props.data.recommendations;\r\n    const listName = this.props.listName === \"mylist\" ? mylist : recommendations;\r\n    const btnType  = this.props.listName === \"mylist\" ? this.props.remove : this.props.add;\r\n    const btnName = this.props.listName === \"mylist\" ? \"removeMovie\" : \"addMovie\";\r\n    console.log(mylist);\r\n    return(\r\n      <div>\r\n        <ul >\r\n          {listName.map((item, index) =>(\r\n            <li key={index}>\r\n              <img \r\n                src ={item.img} \r\n                alt = {item.title}\r\n                />\r\n                <div>{item.title}</div>\r\n                <button onClick = {() => btnType(item)}>{btnName}</button>  \r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => { \r\n  console.log('sta', state)\r\n  return{\r\n    data: state\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchData: () => {\r\n    dispatch(getData());\r\n  },\r\n  remove : (movie) =>{\r\n    dispatch(removeMovie(movie));\r\n  }, \r\n  add: (movie) => {\r\n    dispatch(addMovie(movie));\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Template);\r\n","\r\nexport const addData = data =>({\r\n    type : 'ADD_DATA',\r\n    data\r\n});\r\n\r\nexport const clearData = () =>({\r\n    type : \"CLEAR_DATA\"\r\n});\r\n\r\nexport const getData = () => async dispatch =>{\r\n    try{\r\n        const url = \"https://5d3ddc4f139f4200145323bf.mockapi.io/movies\";\r\n        const response = await fetch(url);\r\n        const responseBody = await response.json();\r\n        console.log(responseBody)\r\n        dispatch(addData(responseBody));\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n        dispatch(clearData());\r\n    }\r\n};\r\n\r\nexport const removeMovie = movie => ({\r\n    type : \"REMOVE_MOVIE\",\r\n    movie\r\n});\r\n\r\nexport const addMovie = movie => ({\r\n    type : \"ADD_MOVIE\",\r\n    movie\r\n})","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../App.css';\r\n\r\nclass Titles extends React.Component{\r\n  /*\r\n  componentDidMount() {\r\n    this.props.fetchData();\r\n  }\r\n  */\r\n  render(){\r\n    console.log(this.props.data)\r\n    const mylist = this.props.data.mylist;\r\n    console.log(mylist);\r\n    return(\r\n      <div>\r\n        <ul>\r\n          {mylist.map((item, index) =>(\r\n            <li key={index}>\r\n                {item.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => { \r\n  console.log('sta', state)\r\n  return{\r\n    data: state\r\n  }\r\n};\r\n\r\n/*\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchData: () => {\r\n    dispatch(getData());\r\n  },\r\n});\r\n*/\r\nexport default connect(mapStateToProps)(Titles);\r\n","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Template from './components/Template';\nimport Titles from './components/Titles';\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return(\n     <div>\n       <Header/>\n       <Template listName = \"mylist\" />\n       <Template listName = \"recommendations\" />\n       <Titles />\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst defaultState = {\r\n    mylist: [],\r\n    recommendations: [],\r\n  };\r\n\r\nexport const reducers = (state = defaultState, action) =>{\r\n    switch(action.type){\r\n        case 'ADD_DATA':\r\n            return action.data;\r\n            \r\n        case 'CLEAR_DATA':\r\n            return [];\r\n\r\n        case 'REMOVE_MOVIE':\r\n            console.log(action.movie);\r\n            const mylistMovie = state.mylist.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n            console.log(mylistMovie);\r\n            return{\r\n                ...state,\r\n                mylist: mylistMovie,\r\n                recommendations:[...state.recommendations, action.movie]\r\n            };\r\n        case 'ADD_MOVIE':\r\n            console.log(action.movie);\r\n            const recommendationsMovie = state.recommendations.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n            console.log(recommendationsMovie);\r\n            return{\r\n                ...state,\r\n                recommendations: recommendationsMovie,\r\n                mylist: [...state.mylist, action.movie]\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {reducers} from './reducers';\r\n\r\nexport function configureStore() {\r\n    const store = createStore(reducers,  applyMiddleware(thunk));\r\n    return store;\r\n}\r\n  \r\nexport const store = configureStore();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nReactDOM.render(\n   <Provider store={store}>\n     <App />\n   </Provider>, \n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}