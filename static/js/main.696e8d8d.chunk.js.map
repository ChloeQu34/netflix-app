{"version":3,"sources":["Netflix-Logo.png","redux.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultState","mylist","recommendations","reducers","combineReducers","getDataReducer","state","arguments","length","undefined","action","type","data","console","log","movie","mylistMovie","filter","item","id","Object","objectSpread","concat","toConsumableArray","recommendationsMovie","store","createStore","applyMiddleware","thunk","App","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","props","fetchData","_this","react_default","a","createElement","className","src","logo","alt","map","index","img","title","onClick","remove","add","Component","AppContainer","connect","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","responseBody","wrap","_context","prev","next","fetch","sent","json","t0","error","stop","_x","removeMovie","addMovie","Boolean","window","location","hostname","match","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.696e8d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Netflix-Logo.002d2250.png\";","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// redux actions\r\nexport const addData = data =>({\r\n    type : 'ADD_DATA',\r\n    data\r\n});\r\n\r\nexport const clearData = () =>({\r\n    type : \"CLEAR_DATA\"\r\n});\r\n\r\nexport const getData = () => async dispatch =>{\r\n    try{\r\n         const url = \"https://5d3ddc4f139f4200145323bf.mockapi.io/movies\";\r\n        const response = await fetch(url);\r\n        const responseBody = await response.json();\r\n        console.log(responseBody)\r\n        dispatch(addData(responseBody));\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n        dispatch(clearData());\r\n    }\r\n};\r\n\r\nexport const removeMovie = movie => ({\r\n    type : \"REMOVE_MOVIE\",\r\n    movie\r\n});\r\n\r\nexport const addMovie = movie => ({\r\n    type : \"ADD_MOVIE\",\r\n    movie\r\n})\r\n\r\n//redux reducers\r\n\r\nconst defaultState = {\r\n    mylist: [],\r\n    recommendations: [],\r\n  };\r\n\r\nexport const getDataReducer = (state = defaultState, action) =>{\r\n    switch(action.type){\r\n        case 'ADD_DATA':\r\n            return action.data;\r\n        case 'CLEAR_DATA':\r\n            return [];\r\n        case 'REMOVE_MOVIE':\r\n            console.log(action.movie);\r\n            const mylistMovie = state.mylist.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n            console.log(mylistMovie);\r\n            return{\r\n                ...state,\r\n                mylist: mylistMovie,\r\n                recommendations:[...state.recommendations, action.movie]\r\n            };\r\n        case 'ADD_MOVIE':\r\n            console.log(action.movie);\r\n            const recommendationsMovie = state.recommendations.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n            console.log(recommendationsMovie);\r\n            return{\r\n                ...state,\r\n                recommendations: recommendationsMovie,\r\n                mylist: [...state.mylist, action.movie]\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport const reducers = combineReducers({getDataReducer});\r\n\r\n//redux store\r\n\r\nexport function configureStore() {\r\n    const store = createStore(reducers,  applyMiddleware(thunk));\r\n    return store;\r\n}\r\n  \r\nexport const store = configureStore();","import React, {Component} from 'react';\nimport { getData } from './redux';\nimport {removeMovie} from './redux';\nimport {addMovie} from './redux';\nimport {connect} from 'react-redux';\nimport logo from './Netflix-Logo.png';\nimport './App.css';\nexport class App extends Component{\n  componentDidMount() {\n    this.props.fetchData();\n  }\n  render(){\n    console.log(this.props.data)\n    const mylist = this.props.data.mylist;\n    const recommendations = this.props.data.recommendations;\n    console.log(mylist);\n    return(\n      <div>\n        <div className = \"background\">\n          <img className = \"logo\" src = {logo} alt = \"netflix icon\" />\n        </div>\n        <ul >\n          {mylist.map((item, index) =>(\n            <li key={index}>\n              <img \n                src ={item.img} \n                alt = {item.title}\n                />\n                <div>{item.title}</div>\n                <button onClick = {() => this.props.remove(item)}>removeMovie</button>\n               \n            </li>\n          ))}\n        </ul>\n        <ul>\n        {recommendations.map((item, index) =>(\n            <li key={index}>\n              <img\n                src ={item.img} \n                alt = {item.title}\n                />\n                <div>{item.title}</div>\n                <button onClick = {()=> this.props.add(item)}>addMovie</button>\n            </li>\n          ))}\n        </ul>\n        <ul >\n          {mylist.map((item, index) =>(\n            <li key={index}>\n                {item.title}\n            </li>\n        ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// AppContainer.js\nconst mapStateToProps = (state) => { \n  console.log('sta', state.getDataReducer)\n  return{\n    data: state.getDataReducer \n  }\n};\n//const mapDispatchToProps = { getData };\nconst mapDispatchToProps = dispatch => ({\n  fetchData: () => {\n    dispatch(getData());\n  },\n  remove : (movie) =>{\n    dispatch(removeMovie(movie));\n  }, \n  add: (movie) => {\n    dispatch(addMovie(movie));\n  }\n});\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\n\nReactDOM.render(\n   <Provider store={store}>\n     <AppContainer />\n   </Provider>, \n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}