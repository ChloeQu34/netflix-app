{"version":3,"sources":["Netflix-Logo.png","components/Header.js","components/Template.js","components/Titles.js","App.js","Redux/actions.js","serviceWorker.js","Redux/reducers.js","Redux/store.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Template","props","listName","myList","recommendationList","btnType","remove","add","btnName","map","item","key","id","img","title","onClick","Titles","mylist","App","this","fetchData","data","recommendations","components_Header","components_Template","components_Titles","React","Component","connect","state","dispatch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","responseBody","wrap","_context","prev","next","fetch","sent","json","type","t0","stop","_x","apply","arguments","movie","removeMovie","addMovie","Boolean","window","location","hostname","match","defaultState","reducers","length","undefined","action","mylistMovie","filter","objectSpread","concat","toConsumableArray","recommendationsMovie","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e746e7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Netflix-Logo.002d2250.png\";","import React from \"react\"\r\nimport logo from '../Netflix-Logo.png';\r\nimport '../App.css';\r\n\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className = \"background\">\r\n          <img className = \"logo\" src = {logo} alt = \"netflix icon\" />\r\n        </div> \r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Template (props){\r\n\r\n  const listName = props.listName === \"mylist\" ? props.myList : props.recommendationList;\r\n  const btnType  = props.listName === \"mylist\" ? props.remove : props.add;\r\n  const btnName = props.listName === \"mylist\" ? \"Remove\" : \"Add\";\r\n  \r\n  return(\r\n    <div>\r\n      <ul >\r\n        {listName.map(item =>(\r\n          <li key={item.id}>\r\n            <img \r\n              src ={item.img} \r\n              alt = {item.title}\r\n            />\r\n            <div>{item.title}</div>\r\n            <button onClick = {() => btnType(item)}>{btnName}</button>  \r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Template;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Titles (props){\r\n  const mylist = props.myList;\r\n  return(\r\n    <div>\r\n      <ul>\r\n        {mylist.map(item =>(\r\n          <li key={item.id}>\r\n              {item.title}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Titles;\r\n","import React from 'react';\nimport {getData } from './Redux/actions';\nimport {removeMovie} from './Redux/actions';\nimport {addMovie} from './Redux/actions'\nimport {connect} from 'react-redux';\nimport Header from './components/Header';\nimport Template from './components/Template';\nimport Titles from './components/Titles';\nimport './App.css';\n\nclass App extends React.Component{\n\n  componentDidMount() {\n    this.props.fetchData();\n  }\n\n  render(){\n    const mylist = this.props.data.mylist;\n    const recommendations = this.props.data.recommendations;\n\n    return(\n      <div>\n        <Header/>\n        <Template listName = \"mylist\"  myList = {mylist} remove = {this.props.remove}/>\n        <Template listName = \"recommendations\" recommendationList = {recommendations} add = {this.props.add}/>\n        <Titles myList = {mylist}/>\n      </div>\n    );\n  } \n}\n\nconst mapStateToProps = (state) => ({data: state});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchData: () => {\n    dispatch(getData());\n  },\n  remove : (movie) =>{\n    dispatch(removeMovie(movie));\n  }, \n  add: (movie) => {\n    dispatch(addMovie(movie));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","\r\nexport const addData = data =>({\r\n    type : 'ADD_DATA',\r\n    data\r\n});\r\n\r\nexport const clearData = () =>({\r\n    type : \"CLEAR_DATA\"\r\n});\r\n\r\nexport const getData = () => async dispatch =>{\r\n    try{\r\n        const url = \"https://5d3ddc4f139f4200145323bf.mockapi.io/movies\";\r\n        const response = await fetch(url);\r\n        const responseBody = await response.json();\r\n        dispatch(addData(responseBody));\r\n    }\r\n    catch(error){\r\n        dispatch(clearData());\r\n    }\r\n};\r\n\r\nexport const removeMovie = movie => ({\r\n    type : \"REMOVE_MOVIE\",\r\n    movie\r\n});\r\n\r\nexport const addMovie = movie => ({\r\n    type : \"ADD_MOVIE\",\r\n    movie\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst defaultState = {\r\n    mylist: [],\r\n    recommendations: [],\r\n  };\r\n\r\nexport const reducers = (state = defaultState, action) =>{\r\n    switch(action.type){\r\n        case 'ADD_DATA':\r\n            return action.data;\r\n            \r\n        case 'CLEAR_DATA':\r\n            return [];\r\n\r\n        case 'REMOVE_MOVIE':\r\n           \r\n            const mylistMovie = state.mylist.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n            \r\n            return{\r\n                ...state,\r\n                mylist: mylistMovie,\r\n                recommendations:[...state.recommendations, action.movie]\r\n            };\r\n        case 'ADD_MOVIE':\r\n           \r\n            const recommendationsMovie = state.recommendations.filter((item) => {\r\n                return action.movie.id !== item.id;\r\n            });\r\n           \r\n            return{\r\n                ...state,\r\n                recommendations: recommendationsMovie,\r\n                mylist: [...state.mylist, action.movie]\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {reducers} from './reducers';\r\n\r\nexport function configureStore() {\r\n    const store = createStore(reducers,  applyMiddleware(thunk));\r\n    return store;\r\n}\r\n  \r\nexport const store = configureStore();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nReactDOM.render(\n   <Provider store={store}>\n     <App />\n   </Provider>, \n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}